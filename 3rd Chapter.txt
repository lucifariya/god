------  Game Programming With C++  -------




Constructors and Destructors
----------------------------


Think of constructors and destructors like turning on and off a smart device.


Concept :
--------- 

When we buy a smart fan and plug it in, it should automatically set itself to a default speed (medium). You don’t need to manually press buttons to set it up it just works.


Similarly when we unplug the fan, it should turn off and clean up temporary settings before shutting down.


A constructor is like the fan automatically setting itself up when plugged in, it initializes the object as soon as it is created.


A destructor is like the fan turning off and cleaning up when unplugged, it destroys the object when it is no longer needed.




Example in C++ : Without a constructor
--------------------------------------


class Fan {
    int speed;
public:
    void setSpeed(int s) { speed = s; }
    void showSpeed() { cout << "Speed: " << speed << endl; }
};

int main() {
    Fan myFan;
    myFan.setSpeed(3);  // Manually setting speed
    myFan.showSpeed();  // Speed: 3
}





With a constructor: Initializes object automatically.
------------------


class Fan {
    int speed;
public:
    Fan() { speed = 2; }  // Constructor sets default speed
    void showSpeed() { cout << "Speed: " << speed << endl; }
};

int main() {
    Fan myFan;  // Automatically set to speed 2
    myFan.showSpeed();  // Speed: 2
}




With a destructor: Cleans up when object is no longer needed.
------------------

class Fan {
    int speed;
public:
    Fan() { speed = 2; }
    ~Fan() { cout << "Fan turned off" << endl; }  // Destructor
    void showSpeed() { cout << "Speed: " << speed << endl; }
};

int main() {
    Fan myFan;
    myFan.showSpeed();
}  // When program ends, "Fan turned off" is printed







Constructors in C++ :
--------------------


A constructor is a special member function in a class that automatically initializes objects when they are created. It has the same name as the class and is called automatically upon object creation.


No need to call it explicitly.

Remember, when a constructor is declared for a class, initialization of the class objects becomes mandatory.


Example :
---------

#include <iostream>
using namespace std;

class Integer {
    int m, n;  // Private data members
public:
    Integer() { // Constructor (same name as class)
        m = 0;
        n = 0;
    }
    void showData() {
        cout << "m = " << m << ", n = " << n << endl;
    }
};

int main() {
    Integer int1;  // Object is created, constructor is called automatically
    int1.showData(); // Output: m = 0, n = 0
    return 0;
}




NOTE :

The constructor functions have some special characteristics. These are :


• They should be declared in the public section.

• They are invoked automatically when the objects are created.

• They do not have return types, not even void and therefore, and they cannot return values.

• They cannot be inherited, though a derived class can call the base class constructor.

• Like other C++ functions, they can have default arguments.

• Constructors cannot be virtual.

• We cannot refer to their addresses.

• An object with a constructor (or destructor) cannot be used as a member of a union.

• They make ‘implicit calls’ to the operators new and delete when memory allocation is required.




Default Constructor :
-------------------

A constructor with no parameters is called a default constructor.

If no constructor is defined, the compiler provides a default constructor automatically.


Example :
--------

class A {
public:
    A() { cout << "Default constructor called" << endl; }
};

int main() {
    A obj;  // Automatically calls the default constructor
}





Parameterized Constructors :
---------------------------


Constructors can take parameters to initialize objects with different values.


Example :
--------

#include <iostream>
using namespace std;

class Integer {
    int m, n;
public:
    Integer(int x, int y) { // Parameterized constructor
        m = x;
        n = y;
    }
    void showData() {
        cout << "m = " << m << ", n = " << n << endl;
    }
};

int main() {
    Integer int1(0, 100);  // Implicit call
    Integer int2 = Integer(5, 50);  // Explicit call

    int1.showData(); // Output: m = 0, n = 100
    int2.showData(); // Output: m = 5, n = 50

    return 0;
}





Ways to Call a Parameterized Constructor :
----------------------------------------


Explicit Call :
-------------

Integer int2 = Integer(0, 100);

This method explicitly calls the constructor and assigns the returned object to int1.
Looks like function syntax but initializes an object.


Implicit Call (Shorthand Method) :
--------------------------------

Integer int1(0, 100);

This method directly initializes the object with constructor arguments.



Notes on Parameterized Constructors :
-----------------------------------

Mandatory Arguments : When a constructor is parameterized, arguments must be provided during object creation.

Automatic Execution : Called automatically when an object is created.

Cannot Use Default Object Declaration






Class with Constructors:
------------------------


#include <iostream>
using namespace std;

class integer {
    int m, n;

public:
    integer(int, int); // Constructor declared

    void display(void) {
        cout << "m = " << m << "\n";
        cout << "n = " << n << "\n";
    }
};


// Constructor definition

integer::integer(int x, int y) {
    m = x;
    n = y;
}


int main() {
    integer int1(0, 100);  // Implicit constructor call
    integer int2 = integer(25, 75); // Explicit constructor call

    cout << "\nOBJECT 1\n";
    int1.display();

    cout << "\nOBJECT 2\n";
    int2.display();

    return 0;
}






Copy Constructor (Special Constructor) :
--------------------------------------

A copy constructor initializes an object using another object of the same class.


Invalid Copy Constructor :
------------------------

class A {
public:
    A(A); // Illegal: Cannot pass object by value
};


Why?  

Passing an object by value requires making a copy of the object, which requires calling the constructor again, leading to an infinite loop.




Valid Copy Constructor :
----------------------


class A {
public:
    A(A& obj) {  // Pass by reference
        cout << "Copy constructor called" << endl;
    }
};

int main() {
    A obj1;  // Normal object creation
    A obj2 = obj1;  // Copy constructor is called
    return 0;
}





Example 2 :
----------


#include <iostream>
using namespace std;

class code {
    int id;

public:
    code() { }  // Default Constructor
    code(int a) { id = a; }  // Parameterized Constructor
    code(code &x) { id = x.id; }  // Copy Constructor

    void display() { cout << id; }
};

int main() {
    code A(100);  // Object A is created and initialized
    code B(A);    // Copy constructor is called (B is a copy of A)
    code C = A;   // Copy constructor is called again (C is a copy of A)
    
    code D;  // D is created but not initialized
    D = A;   // Copy constructor not called (assignment, not object creation)

    cout << "\n id of A: "; A.display();
    cout << "\n id of B: "; B.display();
    cout << "\n id of C: "; C.display();
    cout << "\n id of D: "; D.display();

    return 0;
}


 id of A: 100
 id of B: 100
 id of C: 100
 id of D: 100


code(code &x) { id = x.id; }
It initializes a new object by copying the values from an existing object.


NOTE:

A reference variable has been used as an argument to the copy constructor. 

We cannot pass the argument by value to a copy constructor.


Assignment (=) and Copy Construction are different:
Copy construction creates a new object as a copy.
Assignment updates an existing object.






Multiple Constructors in a Class (Constructor Overloading) :
------------------------------------------------------------

C++ allows multiple constructors in the same class, enabling different ways to initialize objects. This is called constructor overloading.



Example: Multiple Constructors in a Class


#include <iostream>
using namespace std;

class integer {
    int m, n;

public:
    integer() { m = 0; n = 0; }  // Constructor 1: No arguments (default)
    integer(int a, int b) { m = a; n = b; }  // Constructor 2: Two arguments
    integer(integer &i) { m = i.m; n = i.n; }  // Constructor 3: Copy constructor

    void display() {
        cout << "m = " << m << ", n = " << n << endl;
    }
};

int main() {
    integer I1;  // Calls Constructor 1 (default constructor)
    integer I2(20, 40);  // Calls Constructor 2
    integer I3(I2);  // Calls Constructor 3 (copy constructor) // copies values from one object to another.

    cout << "I1: "; I1.display();
    cout << "I2: "; I2.display();
    cout << "I3: "; I3.display();

    return 0;
}


I1: m = 0, n = 0
I2: m = 20, n = 40
I3: m = 20, n = 40






Constructor Overloading Example:
-------------------------------

Multiple constructors share the same name but take different parameters.


Example :
--------

#include <iostream>
using namespace std;

class complex {
    float x, y;

public:
    complex() {}  // Constructor 1: No arguments
    complex(float a) { x = y = a; }  // Constructor 2: One argument
    complex(float real, float imag) { x = real; y = imag; }  // Constructor 3: Two arguments

    friend complex sum(complex, complex);
    friend void show(complex);
};


// Function to add two complex numbers
complex sum(complex c1, complex c2) {
    complex c3;
    c3.x = c1.x + c2.x;
    c3.y = c1.y + c2.y;
    return c3;
}


// Function to display complex number
void show(complex c) {
    cout << c.x << " + j" << c.y << endl;
}


int main() {
    complex A(2.7, 3.5);  // Calls constructor 3
    complex B(1.6);  // Calls constructor 2
    complex C;  // Calls constructor 1 (no initialization)
    
    C = sum(A, B);  // Add A and B

    cout << "A = "; show(A);
    cout << "B = "; show(B);
    cout << "C = "; show(C);

    // Another way to initialize objects
    complex P, Q, R;
    P = complex(2.5, 3.9);
    Q = complex(1.6, 2.5);
    R = sum(P, Q);

    cout << "\nP = "; show(P);
    cout << "Q = "; show(Q);
    cout << "R = "; show(R);

    return 0;
}



A = 2.7 + j3.5
B = 1.6 + j1.6
C = 4.3 + j5.1

P = 2.5 + j3.9
Q = 1.6 + j2.5
R = 4.1 + j6.4





Ambiguity Issue: Default Constructor vs. Default Argument Constructor
---------------------------------------------------------------------


If a class has both:


class A {
public:
    A() { cout << "Default Constructor" << endl; }
    A(int x = 0) { cout << "Constructor with Default Argument" << endl; }
};


Then, the statement: causes ambiguity because the compiler does not know whether to call:

A a;


A() (Default Constructor)

A(int = 0) (Default Argument Constructor)


Solution :

To avoid ambiguity, define only one constructor. If a default argument constructor is used, the default constructor is unnecessary.







Dynamic Constructors: (Dynamic Memory Allocation in Constructors)
--------------------

Constructors can be used to allocate memory dynamically when creating objects. This ensures that each object gets the right amount of memory based on its specific requirements, which is particularly useful when objects vary in size.


In C++, memory allocation during object creation is called dynamic construction. It uses the new operator to allocate memory at runtime.



Example :
-------


Pass by Value vs. Pass by Reference
----------------------------------

#include <iostream>
using namespace std;

void passByValue(int x) {  
    x = x + 10;   // Creates a copy, original remains unchanged
}

void passByReference(int &x) {  
    x = x + 10;   // Modifies directly the original variable
}

int main() {
    int a = 5, b = 5;

    passByValue(a);
    cout << "After passByValue: " << a << endl;  

    passByReference(b);
    cout << "After passByReference: " << b << endl; 

    return 0;
}





Create a C++ program that dynamically allocates memory for string objects using constructors. Implement a class String with:

A "default constructor" for initializing empty strings.
A "parameterized constructor" for initializing objects with given strings.
A "join function" to concatenate two string objects dynamically.
A "display function" to print the stored string.


This demonstrates dynamic memory allocation in constructors and string manipulation using pointers in C++.





class String 
{
    char *name;   // pointer to store a string in dynamically allocated memory
    int length;   // Stores the length of the string

public:
    String( )  // Creates an empty string object
    {  
        length = 0;
        name = new char[length + 1];  // Allocates 1 byte (for \0)
    }

    String(char *s) // Creates a string object from a given C-style string (char *s)
   {  
        length = strlen(s);  // Get length of input string
        name = new char[length + 1];  // Allocate exact memory required (including '\0')
        strcpy(name, s);  // Copy input string into allocated memory
    }

    void display(void) {
        cout << name << "\n";  // Print the stored string
    }

    void join(String &a, String &b);  // Function to concatenate two strings
};



void String :: join(String &a, String &b) {
    length = a.length + b.length;  // Total length of combined strings
    delete name;  // Free previously allocated memory (prevents memory leak)
    name = new char[length + 1];  // Allocate new memory for concatenated string
    strcpy(name, a.name);  // Copy first string
    strcat(name, b.name);  // Append second string
}



int main( ) {
    char *first = "Joseph ";
    String name1(first), name2("Louis "), name3("Lagrange"), s1, s2;

    s1.join(name1, name2);  // s1 = "Joseph Louis "
    s2.join(s1, name3);     // s2 = "Joseph Louis Lagrange"

    name1.display();
    name2.display();
    name3.display();
    s1.display();
    s2.display();

    return 0;
}



Joseph 
Louis 
Lagrange
Joseph Louis 
Joseph Louis Lagrange



Why Use Dynamic Memory in Constructors?
--------------------------------------

If objects have variable-sized data (like strings), dynamic memory ensures efficient use of memory.

Prevents wasting memory by allocating only what is needed.

Enables modifying object size at runtime (like string concatenation).






Destructors
-----------

A destructor is a special member function in a class that is automatically called when an object goes out of scope or is explicitly deleted. 

It is primarily used for cleaning up resources such as dynamically allocated memory, closing file handles, or releasing database connections.


Features :

The destructor has the same name as the class, but prefixed with a tilde (~).
It does not take any parameters and does not return any value.
It is called implicitly by the compiler when an object is destroyed.
It is commonly used to release memory allocated using new to prevent memory leaks.


Example :
-------- 

#include <iostream>
using namespace std;

int count = 0;  

class test {
public:
    test() { 
        count++;
        cout << "Constructor Msg: Object number " << count << " created..";
    }

    ~test() {  
        cout << "Destructor Msg: Object number " << count << " destroyed..";
        count--;
    }
};


int main() {
    cout << "Inside the main block..";
    
    cout << "\nCreating first object T1..";
    test T1;  

    {  
        cout << "inside Block 1..";
        cout << "\nCreating two more objects T2 and T3..";
        test T2, T3;  
        cout << "\nLeaving Block 1..";
    }  // T2 and T3 go out of scope, so their destructors are called

    cout << "\nBack inside the main block..";
    return 0;
}  // T1 is destroyed when `main()` ends





Inside the main block..

Creating first object T1..
Constructor Msg: Object number 1 created..

Inside Block 1..

Creating two more objects T2 and T3..
Constructor Msg: Object number 2 created..
Constructor Msg: Object number 3 created..

Leaving Block 1..

Destructor Msg: Object number 3 destroyed..
Destructor Msg: Object number 2 destroyed..

Back inside the main block..

Destructor Msg: Object number 1 destroyed..






Solved 
------


Q1.

Define a "class String" that could work as a user-defined string type. Include constructors that will enable us to create an uninitialized string  :  "  String s1; // string with length 0 " ; and also to initialize an object with a string constant at the time of creation like : " String s2(“Well done!”); " 

Include a function that adds two strings to make a third string. Note that the statement " s2 = s1; ",  will be perfectly reasonable expression to copy one string to another.

Write a complete program to test your class to see that it does the following tasks:

(a) Creates uninitialized string objects.
(b) Creates objects with string constants.
(c) Concatenates two strings properly.
(d) Displays a desired string object.






Concept :

A default constructor for creating an empty string.
A parameterized constructor for initializing with a string constant.
A copy constructor to allow copying of objects.
A destructor to free dynamically allocated memory.
An overloaded assignment operator (=) for copying strings.
A join function to concatenate two strings.
A display function to print the string.


#include <iostream>
#include <cstring>  // For strcpy, strcat, strlen
using namespace std;

class String 
{
    char *name;  // Pointer to dynamically allocated memory for a string
    int length;  // Stores the length of the string

public:
    // Default Constructor (Creates an empty string)

    String() 
   {
        length = 0;
        name = new char[1];  // Allocating memory for '\0'
        name[0] = '\0';  // Empty string
    }

    // Parameterized Constructor (Initializes with a string constant)

    String(const char *s) 
   {
        length = strlen(s);  // Get length of input string
        name = new char[length + 1];  // Allocate exact memory required (including '\0')
        strcpy(name, s);  // Copy input string into allocated memory
    }

    // Copy Constructor 

    String(const String &s) 
   {
        length = s.length;
        name = new char[length + 1];
        strcpy(name, s.name);
    }

    // Destructor (Frees dynamically allocated memory)

    ~String() {
        delete[] name;
    }

    // Function to join two strings

    void join(const String &a, const String &b) 
   {
        delete[] name;  // Free existing memory
        length = a.length + b.length;
        name = new char[length + 1];  // Allocate memory for concatenated string
        strcpy(name, a.name);
        strcat(name, b.name);
    }

    // Function to display the string

    void display() const 
   {
        cout << name << endl;
    }
};



int main() 
{
    // (a) Creating an uninitialized string object

    String s1;
    cout << "Uninitialized String (empty): ";
    s1.display();

    // (b) Creating objects with string constants

    String s2("Well done!");
    cout << "Initialized String s2: ";
    s2.display();

    // (c) Concatenating two strings

    String s3(" Keep going!");
    String s4;

    s4.join(s2, s3);
    cout << "Concatenated String (s2 + s3): ";
    s4.display();

    return 0;
}




Uninitialized String (empty): 
Initialized String s2: Well done!
Concatenated String (s2 + s3): Well done! Keep going!





Q2.

A book shop maintains the inventory of books that are being sold at the shop. The list includes details such as author, title, price, publisher and stock position. Whenever a customer wants a book, the sales person inputs the title and author and the system searches the list and displays whether it is available or not. If it is not, an appropriate message is displayed. If it is, then the system displays the book details and requests for the number of copies required. If the requested copies are available, the total cost of the requested copies is displayed; otherwise the message “Required copies not in stock” is displayed.

Design a system using a class called books with suitable member functions and constructors. Use new operator in constructors to allocate memory space required.


NOTE :

Class Design:
------------ 

Data Members: author, title, price, publisher, stock.

Member Functions:

inputDetails() — to enter book details.
checkAvail() — to search for a book by title and author.
updateStock() — to update stock and calculate the total price.
display() — to display book details.

Memory Management: use new to allocate memory for strings (author, title, publisher).



Sample run :

Enter details for 2 books:
---------------------------

Enter book title: C++ Programming
Enter author name: Balagurusamy
Enter publisher: ABC
Enter price: 49.99
Enter stock position: 5

Enter book title: Data Structures
Enter author name: Robert
Enter publisher: Sams Publishing
Enter price: 39.99
Enter stock position: 7

------------------------------

Enter the title of the book you're looking for: C++ Programming
Enter the author of the book: Balagurusamy

------------------------------
Book Details:
Title: C++ Programming
Author: Balagurusamy
Publisher: ABC
Price: 49.99
Stock: 5 copies
--------------------------------
Enter the number of copies required: 2
Total cost: 99.98





#include <iostream>
#include <cstring>
using namespace std;

class Book 
{
    char *author, *title, *publisher;
    float price;
    int stock;

public:
    Book() 
   {
        author = new char[20];
        title = new char[20];
        publisher = new char[20];
        price = 0.0;
        stock = 0;
    }

    ~Book() 
   {
        delete[] author;
        delete[] title;
        delete[] publisher;
    }

    void inputDetails()
    {
        cout << "Enter book title: ";
        cin.ignore(); // Clear the input buffer
        cin.getline(title, 20);

        cout << "Enter author name: ";
        cin.getline(author, 20);

        cout << "Enter publisher: ";
        cin.getline(publisher, 20);

        cout << "Enter price: ";
        cin >> price;

        cout << "Enter stock position: ";
        cin >> stock;
    }

    void display() const 
   {
        cout << "\nBook Details:\n";
        cout << "Title: " << title << endl;
        cout << "Author: " << author << endl;
        cout << "Publisher: " << publisher << endl;
        cout << "Price: " << price << endl;
        cout << "Stock: " << stock << " copies\n";
    }

    bool checkAvail(const char *searchTitle, const char *searchAuthor) const 
   {
        return (strcmp(title, searchTitle) == 0 && strcmp(author, searchAuthor) == 0);
    }

    void updateStock(int requestedCopies) {
        if (stock >= requestedCopies) {
            float totalCost = requestedCopies * price;
            cout << "Total cost: " << totalCost << endl;
            stock -= requestedCopies;
        } else {
            cout << "Required copies not in stock.\n";
        }
    }
};



int main() {
    const int numBooks = 3;
    Book in[numBooks];  // Array of Book objects

    cout << "Enter details for " << numBooks << " books:\n";
    for (int i = 0; i < numBooks; ++i) 
   {
        in[i].inputDetails();
    }

    char searchTitle[20], searchAuthor[20];
    cout << "\nEnter the title of the book you're looking for: ";
    cin.ignore();  
    cin.getline(searchTitle, 20);

    cout << "Enter the author of the book: ";
    cin.getline(searchAuthor, 20);

    bool found = false;

    for (int i = 0; i < numBooks; ++i) {
        if (in[i].checkAvail(searchTitle, searchAuthor)) {
            found = true;
            in[i].display();

            int copies;
            cout << "\nEnter the number of copies required: ";
            cin >> copies;

            in[i].updateStock(copies);
            break;
        }
    }

    if (!found) {
        cout << "Book not found in inventory.\n";
    }

    return 0;
}






Q3.

Improve the system design in above program to incorporate the following features:

(a) The price of the books should be updated as and when required. Use a private member function to implement this.

(b) The stock value of each book should be automatically updated as soon as a transaction is completed.

(c) The number of successful and unsuccessful transactions should be recorded for the purpose of statistical analysis. Use static data members to keep count of transactions.




----- Souvik Kr. Parui -------
