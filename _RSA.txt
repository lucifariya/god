

Bada Bhai:-

    import math
    import random

    def keyGen():
        p = int(input("Enter 1st Large Prime p: "))
        q = int(input("Enter 2nd Large Prime q: "))
        n = p*q
        phi_n = (p-1)*(q-1)
        e = int(input("Randomly choose e betwen 1 and phi_n: "))
        while(math.gcd(e, phi_n) != 1 and (1<e and e<phi_n)):
            e = int(input("Randomly choose e between 1 and phi_n"))
            
        k = random.randint(1, 1000)
        while((k*phi_n+1)%e != 0):
            k = random.randint(1, 1000)
        d = int((k*phi_n+1)/e)
        
        return e, n, d

    def encrypt(P, e, n):
        C = pow(P, e)%n
        return C

    def decrypt(C, d, n):
        P =pow(C, d)%n
        return P

    e = n = d = 0
    e, n, d = keyGen()
    print('e = ', e, 'n = ', n, 'd = ', d)

    Enter 1st Large Prime p: 7
    Enter 2nd Large Prime q: 11
    Randomly choose e betwen 1 and phi_n: 37
    e =  37 n =  77 d =  733

    P = int(input('Enter PT(integer): '))
    C = encrypt(P, e, n)
    print('CT = ', C)
    P1 = decrypt(C, d, n)
    print('Decrypted PT: ', P1)

    Enter PT(integer): 5
    CT =  47
    Decrypted PT:  5

    #If complete pt in string then mapping 0-25:

    PP = input('Enter PT: ')
    PP = PP.lower().replace(" ", "")
    print('PT is : ', PP)
    CC = ""
    CC_list = []
    for i in range(len(PP)):
        ch = ord(PP[i]) - ord('a')
        tmp = encrypt(ch, e, n)
        CC_list.append(tmp)
        
    for i in CC_list:
        CC += str(i)
    print('CT = ', CC)

    PP1 = ""
    for i in CC_list:
        ch = decrypt(i, d, n)
        ch = chr(97+ch)
        PP1 += str(ch)
        
    print('Decrypted PT = ', PP1)

    Enter PT: Hello World
    PT is :  helloworld
    CT =  28601111422242521131
    Decrypted PT =  helloworld

Chhota Bhai:-

    from Crypto.PublicKey import RSA
    from Crypto.Cipher import PKCS1_OAEP
    import binascii

    # Generate RSA key pair (Public & Private)
    key = RSA.generate(2048)
    public_key = key.publickey()
    private_key = key

    def encryption(public_key, plaintext):
        cipher = PKCS1_OAEP.new(public_key)
        ciphertext = cipher.encrypt(plaintext.encode())
        return binascii.hexlify(ciphertext).decode()

    def decryption(private_key, ciphertext):
        cipher = PKCS1_OAEP.new(private_key)
        decrypted_text = cipher.decrypt(binascii.unhexlify(ciphertext)).decode()
        return decrypted_text

    P = input("Enter Plain-Text: ")
    print("Plain-Text is:", P)

    Enter Plain-Text: Hello, RSA!
    Plain-Text is: Hello, RSA!

    C = encryption(public_key, P)
    print("Cipher-Text after encryption:", C)

    Cipher-Text after encryption: 7dcf3d32cc86c941b61a747b8a71640d3c9787a84cbe963ebc064ab26bbb73a4fd0f7eba3aca49791e93066d4b49f6ff46b986173fe85abaef1f72f753c5699d9ad3839043ee9a08da3fe25087ded6a94c8521a2e65d51f95632d3a7467881fa3a3587f40f2a132a069ca09daec1151b673143596afe61d596f8584a6fa49e97faf088441227851ebb3f5e2c9aaa825945351e3eef981b648449903a0875c2672d99f7a1c45a8c0cf8e9dd775c769e6632e233930aea93c2ae84a2367f84545554cb7acdb210ac26ec0396cf6980b7cfc05bad5290687064e84502b8433143394fcc84ae3d6b73ac6efd2d889da5955ca7132ebcce083f5a8722e2231c86b0cb

    P_decrypted = decryption(private_key, C)
    print("Decrypted Text:", P_decrypted)

    Decrypted Text: Hello, RSA!
