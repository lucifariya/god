# (a) Create a CSV file named iris_subset.csv:
```
SepalLength,SepalWidth,PetalLength,PetalWidth,Class
5.1,3.5,1.4,0.2,setosa
4.9,3.0,1.4,0.2,setosa
4.6,3.1,1.5,0.2,setosa
4.7,3.2,1.3,0.2,setosa
7.0,3.2,4.5,1.5,versicolor
6.4,3.2,4.5,1.5,versicolor
6.9,3.1,4.9,1.5,versicolor
6.3,3.3,6.0,2.5,virginica
7.1,3.0,5.9,2.1,virginica
6.3,2.9,5.6,1.8,virginica

Save the above as iris_subset.csv.
```

# (b) Python code to read and display the dataset:

import pandas as pd

# Read CSV
df = pd.read_csv('iris_subset.csv')

# Display the dataset
print(df)

# 2. (a) Statistical Analysis and Visualization

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('iris_subset.csv')

# Calculate standard deviations
std_devs = df[['SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth']].std()
print("Standard Deviations:\n", std_devs)

# Scatter plot: Sepal Length vs Sepal Width
plt.scatter(df['SepalLength'], df['SepalWidth'], c='blue', edgecolors='k')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('Sepal Length vs Sepal Width')
plt.grid(True)
plt.show()

# (b) KNN Classification

from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import KNeighborsClassifier

# Encode class labels
le = LabelEncoder()
df['ClassEncoded'] = le.fit_transform(df['Class'])

# Features and target
X = df[['SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth']]
y = df['ClassEncoded']

# KNN with k=3
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X, y)

# Predict new sample
new_sample = [[6.3, 2.8, 5.1, 1.5]]
predicted = knn.predict(new_sample)
predicted_class = le.inverse_transform(predicted)

print("Predicted class for [6.3, 2.8, 5.1, 1.5]:", predicted_class[0])

# (b) KNN Classification with manual mapping:

# Manual mapping
class_map = {'setosa': 0, 'versicolor': 1, 'virginica': 2}
df['ClassEncoded'] = df['Class'].map(class_map)

# Then use this for training
X = df[['SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth']]
y = df['ClassEncoded']

# Train KNN
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X, y)

# Predict a new sample
new_sample = [[6.3, 2.8, 5.1, 1.5]]
pred = knn.predict(new_sample)

# Reverse map the prediction
reverse_map = {v: k for k, v in class_map.items()}
print("Predicted class:", reverse_map[pred[0]])

